{"mappings":"YAaA,IAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAG9BG,EAAQ,CAEiBC,WAAjB,KAEWC,UAAb,EACVC,KAAA,WAGkCC,EAFnBC,EAAkB,G,EAIjCC,MAAA,WAGoC,IAA9BC,KAAKL,SAAyB,CAIJ,IAAxBM,EAAYC,KAAKC,MAETH,KAATL,UAAW,EAEyBK,KAApCN,WAAaU,aAAY,WAOGP,EAFRC,EAJJI,KAAKC,MACOF,G,GAO9B,KAEHd,EAAKC,SAASiB,aAAa,YAAY,GACvClB,EAAKI,QAAQe,gBAAgB,WAnB3B,C,EAsBJC,KAAA,WACEC,cAAcR,KAAKN,YAEkCM,KAAhDL,UAAW,EAKgBE,EAFnBC,EAAkB,IAK/BX,EAAKI,QAAQc,aAAa,YAAY,GACtClB,EAAKC,SAASkB,gBAAgB,W,GAkBlC,SAAST,EAAgBY,G,IAAEC,EAAFD,EAAEC,MAAOC,EAATF,EAASE,KAAMC,EAAfH,EAAeG,KACtCzB,EAAKK,UAAUqB,YAAc,GAAYC,OAATJ,EAAM,KAAWI,OAARH,EAAK,KAAQG,OAALF,E,CAOnD,SAASG,EAAIC,GACX,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CASnC,SAASpB,EAAkBqB,GAMzB,MAAO,CAAET,MALKK,EACZK,KAAKC,MAAMF,EAAS,OAA8B,OAIpCR,KAFHI,EAAIK,KAAKC,MAAMF,EAAS,KAAoB,MAEnCP,KADTG,EAAIK,KAAKC,MAAMF,EAAS,IAAc,M,CArCrD1B,EAAMG,OAENT,EAAKC,SAASkC,iBAAiB,SAAS,WACtC7B,EAAMM,O,IAGRZ,EAAKI,QAAQ+B,iBAAiB,SAAS,WACrC7B,EAAMc,M","sources":["src/js/02-timer.js"],"sourcesContent":["// const date1 = new Date();\n// const date1 = Date.now();\n\n// console.log('date1 :>> ', date1);\n// // console.dir(date);\n// setTimeout(() => {\n//   const date2 = Date.now();\n//   console.log('date2 :>> ', date2);\n//   console.log('date1 :>> ', date1);\n\n//   console.log(date2 - date1);\n// }, 3000);\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nconst timer = {\n  // создаем идентификатор интервала\n  intervalId: null,\n  // состояние идентификатора\n  isActive: false,\n  init() {\n    const time = getTimeComponents(0);\n    //   перерисовываем интерфейс с ноликами\n    updateClockface(time);\n  },\n  start() {\n    //   и проверяем если идентификатор активный\n    // выходим из функции и ничего не добавляем\n    if (this.isActive) {\n      return;\n    }\n    //   если не активный то делаем активным\n    const startTime = Date.now();\n    //   делаем активным\n    this.isActive = true;\n    // обращение через this так как это уже свойство объекта\n    this.intervalId = setInterval(() => {\n      const curentTime = Date.now();\n      const deltaTime = curentTime - startTime;\n      // const timeComponents = getTimeComponents(deltaTime);\n      // переменная в которую как в объект записываются часы минуты и секунды в перерасчете от дельтатайт\n      const timeComponents = getTimeComponents(deltaTime);\n      // вызываем функцию и рисуем интерфейс\n      updateClockface(timeComponents);\n      //   console.log(`${hours}:${mins}:${secs}`);\n    }, 1000);\n\n    refs.startBtn.setAttribute('disabled', false);\n    refs.stopBtn.removeAttribute('disabled');\n  },\n\n  stop() {\n    clearInterval(this.intervalId);\n    //   когда останавливаем состояние идентификатора меняем на фолс\n    this.isActive = false;\n    // вызываем функцию и записыаем ее результат в переменную и передаем ей 0\n    //   для расчета часом минут и секунд\n    const time = getTimeComponents(0);\n    //   перерисовываем интерфейс с ноликами\n    updateClockface(time);\n    // ontick(time);\n    // refs.clockface.textContent = '';\n    refs.stopBtn.setAttribute('disabled', false);\n    refs.startBtn.removeAttribute('disabled');\n  },\n};\n//\ntimer.init();\n// timer.start();\nrefs.startBtn.addEventListener('click', () => {\n  timer.start();\n});\n\nrefs.stopBtn.addEventListener('click', () => {\n  timer.stop();\n});\n\n/**принимает время в милисекундах\n * высчитывает сколько в них вмещается часов/минут/секунд\n * рисует интерфейс\n */\nfunction updateClockface({ hours, mins, secs }) {\n  refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n\n/**принимает число, приводит к строке и добавляет в начало 0\n * если число меньше 2х символов\n */\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\n/**\n *\n * @param {*} time принимает время в милисекундах\n * высчитывает сколько в них помещается часов/минут/секунд\n * @returns Возвращает объект со свойствами hours, mins, secs\n */\nfunction getTimeComponents(time) {\n  const hours = pad(\n    Math.floor((time % (1000 * 60 * 60 * 60 * 24)) / (1000 * 60 * 60))\n  );\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n  return { hours, mins, secs };\n}\n"],"names":["$84b9dae4df53835d$var$refs","startBtn","document","querySelector","stopBtn","clockface","$84b9dae4df53835d$var$timer","intervalId","isActive","init","$84b9dae4df53835d$var$updateClockface","$84b9dae4df53835d$var$getTimeComponents","start","this","startTime","Date","now","setInterval","setAttribute","removeAttribute","stop","clearInterval","param","hours","mins","secs","textContent","concat","$84b9dae4df53835d$var$pad","value","String","padStart","time","Math","floor","addEventListener"],"version":3,"file":"02-timer.9735544c.js.map"}